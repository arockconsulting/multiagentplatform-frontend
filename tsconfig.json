```typescript
// tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "*": ["./*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
```

```typescript
// src/components/Button/Button.tsx
import React from 'react';
import styled from 'styled-components';

interface ButtonProps {
  /**
   * Button text
   */
  children: React.ReactNode;
  /**
   * Optional click handler
   */
  onClick?: () => void;
  /**
   * Is this the principal call to action on the page?
   */
  primary?: boolean;
  /**
   * How large should the button be?
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Optional CSS class name
   */
  className?: string;
  /**
   *  Is the button disabled?
   */
  disabled?: boolean;
  /**
   * Aria label for accessibility
   */
  ariaLabel?: string;
}

/**
 * Primary UI component for user interaction
 */
export const Button: React.FC<ButtonProps> = ({
  children,
  onClick,
  primary = false,
  size = 'medium',
  className,
  disabled = false,
  ariaLabel,
}) => {
  return (
    <StyledButton
      type="button"
      onClick={onClick}
      primary={primary}
      size={size}
      className={className}
      disabled={disabled}
      aria-label={ariaLabel}
    >
      {children}
    </StyledButton>
  );
};

const StyledButton = styled.button<{ primary: boolean; size: string }>`
  background-color: ${(props) => (props.primary ? '#007bff' : 'white')};
  color: ${(props) => (props.primary ? 'white' : '#007bff')};
  font-size: ${(props) => {
    switch (props.size) {
      case 'small':
        return '14px';
      case 'large':
        return '20px';
      default:
        return '16px';
    }
  }};
  padding: ${(props) => {
    switch (props.size) {
      case 'small':
        return '6px 12px';
      case 'large':
        return '12px 24px';
      default:
        return '8px 16px';
    }
  }};
  border: 1px solid #007bff;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: ${(props) => (props.primary ? '#0056b3' : '#f0f0f0')};
  }

  &:disabled {
    background-color: #cccccc;
    color: #666666;
    border-color: #999999;
    cursor: not-allowed;
  }
`;
```

```typescript
// src/components/Hero/Hero.tsx
import React from 'react';
import styled from 'styled-components';
import { Button } from 'components/Button/Button';

interface HeroProps {
  /**
   * Title of the hero section
   */
  title: string;
  /**
   * Description of the hero section
   */
  description: string;
  /**
   * Button label
   */
  buttonLabel: string;
  /**
   * Button onClick handler
   */
  onButtonClick: () => void;
}

/**
 * Hero section component
 */
export const Hero: React.FC<HeroProps> = ({ title, description, buttonLabel, onButtonClick }) => {
  return (
    <StyledHero>
      <HeroContent>
        <Title>{title}</Title>
        <Description>{description}</Description>
        <Button primary onClick={onButtonClick} ariaLabel="Learn More">
          {buttonLabel}
        </Button>
      </HeroContent>
    </StyledHero>
  );
};

const StyledHero = styled.section`
  background-color: #f8f9fa;
  padding: 80px 0;
  text-align: center;
`;

const HeroContent = styled.div`
  max-width: 800px;
  margin: 0 auto;
`;

const Title = styled.h1`
  font-size: 3rem;
  margin-bottom: 20px;
  color: #343a40;
`;

const Description = styled.p`
  font-size: 1.25rem;
  color: #6c757d;
  margin-bottom: 30px;
`;
```

```typescript
// src/components/Feature/Feature.tsx
import React from 'react';
import styled from 'styled-components';

interface FeatureProps {
  /**
   * Feature title
   */
  title: string;
  /**
   * Feature description
   */
  description: string;
  /**
   * Feature icon (e.g., FontAwesome icon name)
   */
  icon?: React.ReactNode;
}

/**
 * Feature component
 */
export const Feature: React.FC<FeatureProps> = ({ title, description, icon }) => {
  return (
    <StyledFeature>
      {icon && <IconContainer>{icon}</IconContainer>}
      <Title>{title}</Title>
      <Description>{description}</Description>
    </StyledFeature>
  );
};

const StyledFeature = styled.div`
  text-align: center;
  padding: 20px;
  border: 1px solid #dee2e6;
  border-radius: 5px;
  margin-bottom: 20px;
`;

const IconContainer = styled.div`
  font-size: 2rem;
  margin-bottom: 10px;
  color: #007bff;
`;

const Title = styled.h3`
  font-size: 1.5rem;
  margin-bottom: 10px;
  color: #343a40;
`;

const Description = styled.p`
  font-size: 1rem;
  color: #6c757d;
`;
```

```typescript
// src/components/Footer/Footer.tsx
import React from 'react';
import styled from 'styled-components';

interface FooterProps {
  /**
   * Copyright text
   */
  copyright: string;
}

/**
 * Footer component
 */
export const Footer: React.FC<FooterProps> = ({ copyright }) => {
  return (
    <StyledFooter>
      <Copyright>{copyright}</Copyright>
    </StyledFooter>
  );
};

const StyledFooter = styled.footer`
  background-color: #343a40;
  color: #fff;
  text-align: center;
  padding: 20px;
`;

const Copyright = styled.p`
  font-size: 1rem;
`;
```

```typescript
// src/App.tsx
import React from 'react';
import styled, { createGlobalStyle } from 'styled-components';
import { Hero } from 'components/Hero/Hero';
import { Feature } from 'components/Feature/Feature';
import { Footer } from 'components/Footer/Footer';

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
